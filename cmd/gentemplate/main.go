package main

import (
	"encoding/json"
	"os"
	"strings"
	"text/template"
)

const (
	tmpl = `// Copyright Â© 2015-2018 Victor Antonovich <victor@antonovich.me>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "go:generate go run cmd/gentemplate/main.go". DO NOT EDIT.

package main

import (
	corev1 "k8s.io/api/core/v1"
)

func kubeObjectsFuncMap(dm *DependencyManager) map[string]interface{} {
	return map[string]interface{}{ {{range .}}
		"{{.Plural|Lower}}": {{.Plural|Lower}}(dm),{{end}}
	}
}
{{range .}}
// {{"{{"}}{{.Plural|Lower}} "selector"{{if .HasNamespaces}} "namespace"{{end}}{{"}}"}}
func {{.Plural|Lower}}(dm *DependencyManager) func(...string) ([]corev1.{{.Name}}, error) {
	return func(s ...string) ([]corev1.{{.Name}}, error) {
		if {{if .HasNamespaces}}namespace, {{end}}selector, err := parse{{if .HasNamespaces}}Namespace{{end}}Selector(s...); err == nil {
			return dm.{{.Plural}}({{if .HasNamespaces}}namespace, {{end}}selector)
		} else {
			return nil, err
		}
	}
}
{{end}}
`
)

type Object struct {
	Name          string `json:"name"`
	Plural        string `json:"plural"`
	HasNamespaces bool   `json:"namespaces"`
}

func main() {
	r, err := os.Open("objects.json")
	checkError(err)
	defer r.Close()

	objects := []Object{}
	err = json.NewDecoder(r).Decode(&objects)
	checkError(err)

	t, err := template.New("gentemplate").Funcs(template.FuncMap{
		"Lower": strings.ToLower,
	}).Parse(tmpl)
	checkError(err)

	w, err := os.Create("template_gen.go")
	checkError(err)
	defer w.Close()

	err = t.Execute(w, objects)
	checkError(err)
}

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}
