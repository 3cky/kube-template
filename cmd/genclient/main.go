package main

import (
	"encoding/json"
	"os"
	"strings"
	"text/template"
)

const (
	tmpl = `// Copyright Â© 2015-2018 Victor Antonovich <victor@antonovich.me>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "go:generate go run cmd/genclient/main.go". DO NOT EDIT.

package main

import (
	"context"
	"errors"
	"sort"
	
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	"github.com/golang/glog"
)
{{range .}}
func (c *Client) {{.Plural}}({{if .HasNamespaces}}namespace, {{end}}selector string) ([]corev1.{{.Name}}, error) {
	glog.V(4).Infof("fetching {{.Plural|Lower}},{{if .HasNamespaces}} namespace: %q,{{end}} selector: %q",{{if .HasNamespaces}} namespace,{{end}} selector)

	var {{.Plural|Lower}} []corev1.{{.Name}}

	if c.useInformers {
		c.RLock()
		defer c.RUnlock()

		{{.Name|Lower}}Lister, found := c.listers["{{.Name|Lower}}Lister"]

		if !found {
			{{.Name|Lower}}Informer := c.informerFactory.Core().V1().{{.Plural}}()

			{{.Name|Lower}}Lister = {{.Name|Lower}}Informer.Lister()

			c.listers["{{.Name|Lower}}Lister"] = {{.Name|Lower}}Lister

			go {{.Name|Lower}}Informer.Informer().Run(c.stopCh)

			if synced := cache.WaitForCacheSync(c.stopCh, {{.Name|Lower}}Informer.Informer().HasSynced); !synced {
				return nil, errors.New("{{.Name|Lower}} cache sync failed")
			}
		}

		s, err := labels.Parse(selector)
		if err != nil {
			return nil, err
		}

		es, err := {{.Name|Lower}}Lister.(v1.{{.Name}}Lister).{{if .HasNamespaces}}{{.Plural}}(namespace).{{end}}List(s)
		if err != nil {
			return nil, err
		}

		for _, e := range es {
			{{.Plural|Lower}} = append({{.Plural|Lower}}, *e)
		}
	} else {
		options := metav1.ListOptions{LabelSelector: selector}

		{{.Name|Lower}}List, err := c.kubeClient.CoreV1().{{.Plural}}({{if .HasNamespaces}}namespace{{end}}).List(context.TODO(), options)
		if err != nil {
			return nil, err
		}

		{{.Plural|Lower}} = {{.Name|Lower}}List.Items
	}

	// Make list order stable
	sort.Slice({{.Plural|Lower}}, func(i, j int) bool {
		return {{.Plural|Lower}}[i].Name < {{.Plural|Lower}}[j].Name
	})

	return {{.Plural|Lower}}, nil
}
{{end}}
`
)

type Object struct {
	Name          string `json:"name"`
	Plural        string `json:"plural"`
	HasNamespaces bool   `json:"namespaces"`
}

func main() {
	r, err := os.Open("objects.json")
	checkError(err)
	defer r.Close()

	objects := []Object{}
	err = json.NewDecoder(r).Decode(&objects)
	checkError(err)

	t, err := template.New("genclient").Funcs(template.FuncMap{
		"Lower": strings.ToLower,
	}).Parse(tmpl)
	checkError(err)

	w, err := os.Create("client_gen.go")
	checkError(err)
	defer w.Close()

	err = t.Execute(w, objects)
	checkError(err)
}

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}
